/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */

const { 
  extractAmount, 
  detectAccountType, 
  getDefaultAccountName, 
  formatAmount 
} = require('./parser');

/**
 * –°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param {string} userMessage - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} aiResult - –†–µ–∑—É–ª—å—Ç–∞—Ç –ò–ò-–∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–≥–æ–≤
 * @param {Object} settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Supabase
 * @param {Object} supabaseClient - –ö–ª–∏–µ–Ω—Ç Supabase –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—á–µ—Ç–∞—Ö
 * @returns {Object} - –û–±—ä–µ–∫—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
async function createUnifiedTransactionMessage(userMessage, aiResult, settings = {}, supabaseClient = null) {
  try {
    console.log('üìù –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    
    // 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const amountData = extractAmount(userMessage);
    console.log(`üí∞ –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Å—É–º–º–µ:`, amountData);
    
    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—á–µ—Ç–∞
    const accountType = detectAccountType(userMessage);
    console.log(`üè¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Å—á–µ—Ç–∞: ${accountType}`);
    
    // 3. –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const accountName = getDefaultAccountName(accountType, settings);
    console.log(`üìã –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞: ${accountName}`);
    
    // 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É
    let amount = amountData.amount;
    if (!amount) {
      amount = 0; // –ï—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—Ç–∞–≤–∏–º 0
      console.log(`‚ö†Ô∏è –°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0`);
    }
    
    // 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥
    let tag = '–ü—Ä–æ–¥—É–∫—Ç—ã'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let additionalTags = [];
    
    if (aiResult && aiResult.success && aiResult.tags && aiResult.tags.length > 0) {
      tag = aiResult.tags[0].title; // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–≥
      if (aiResult.tags.length > 1) {
        additionalTags = aiResult.tags.slice(1); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
      }
      console.log(`üè∑Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–≥: ${tag}, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö: ${additionalTags.length}`);
    }
    
    // 6. –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    const today = new Date().toLocaleDateString('ru-RU');
    
    // 7. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
    const formattedAmount = formatAmount(amount);
    
    // 8. –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageText = `–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –æ—Ç ${today}

üõçÔ∏è ${tag}
üëõ ${accountName}
üí≤ ${formattedAmount}
üí¨ ${userMessage}`;
    
    // 9. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const transactionData = {
      tag: {
        id: aiResult && aiResult.tags && aiResult.tags.length > 0 ? aiResult.tags[0].id : null,
        title: tag
      },
      account: {
        name: accountName,
        type: accountType
      },
      amount: amount,
      formattedAmount: formattedAmount,
      comment: userMessage,
      date: today,
      additionalTags: additionalTags,
      aiConfidence: aiResult ? aiResult.confidence : 0
    };
    
    console.log('‚úÖ –ï–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–æ');
    
    return {
      success: true,
      messageText,
      transactionData,
      hasMultipleTags: additionalTags.length > 0,
      aiTags: aiResult && aiResult.tags ? aiResult.tags : []
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–¥–∏–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.message);
    return {
      success: false,
      error: error.message,
      messageText: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`,
      transactionData: null
    };
  }
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param {Object} transactionData - –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 * @param {boolean} hasMultipleTags - –ï—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏
 * @param {Array} aiTags - –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö)
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function createUnifiedTransactionKeyboard(transactionData, hasMultipleTags, aiTags = []) {
  try {
    const keyboard = [];
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏ –æ—Ç –ò–ò, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    if (aiTags && aiTags.length > 0) {
      const tagButtons = [];
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ –æ—Ç –ò–ò (–º–∞–∫—Å–∏–º—É–º 3 –≤ —Ä—è–¥—É)
      for (let i = 0; i < Math.min(aiTags.length, 3); i++) {
        const tag = aiTags[i];
        tagButtons.push({
          text: tag.title,
          callback_data: `unified_tag_${tag.id}`
        });
      }
      
      if (tagButtons.length > 0) {
        keyboard.push(tagButtons);
      }
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const mainButtons = [
      {
        text: 'üí≥',
        callback_data: 'unified_account_card'
      },
      {
        text: 'üíµ',
        callback_data: 'unified_account_cash'
      },
      {
        text: '‚úÖ',
        callback_data: 'unified_apply'
      },
      {
        text: '‚ùå',
        callback_data: 'unified_cancel'
      },
      {
        text: '‚úèÔ∏è',
        callback_data: 'unified_edit'
      }
    ];
    
    keyboard.push(mainButtons);
    
    return keyboard;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error.message);
    return [];
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–≥–æ–º
 * @param {string} currentMessageText - –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} newTagTitle - –ù–æ–≤—ã–π —Ç–µ–≥
 * @returns {string} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function updateMessageWithNewTag(currentMessageText, newTagTitle) {
  try {
    // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–≥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    const updatedMessage = currentMessageText.replace(
      /üõçÔ∏è .+/,
      `üõçÔ∏è ${newTagTitle}`
    );
    
    return updatedMessage;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', error.message);
    return currentMessageText;
  }
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç–æ–º
 * @param {string} currentMessageText - –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} newAccountName - –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞
 * @returns {string} - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function updateMessageWithNewAccount(currentMessageText, newAccountName) {
  try {
    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: "${newAccountName}"`);
    console.log(`üìù –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, currentMessageText);
    
    // –ó–∞–º–µ–Ω—è–µ–º —Å—á–µ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    const updatedMessage = currentMessageText.replace(
      /üëõ .+/,
      `üëõ ${newAccountName}`
    );
    
    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, updatedMessage);
    console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updatedMessage !== currentMessageText ? '–î–ê' : '–ù–ï–¢'}`);
    
    return updatedMessage;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:', error.message);
    return currentMessageText;
  }
}



module.exports = {
  createUnifiedTransactionMessage,
  createUnifiedTransactionKeyboard,
  updateMessageWithNewTag,
  updateMessageWithNewAccount
};
