const AIClient = require('./client');
const SupabaseClient = require('../supabase/client');

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é –ò–ò
 */
async function analyzeMessageWithAI(message, supabaseClient) {
  try {
    console.log('ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò...');
    
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò
    const settingsResult = await supabaseClient.getActiveAISettings();
    if (!settingsResult.success || !settingsResult.data) {
      console.log('‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return {
        success: false,
        error: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã',
        tag: null,
        confidence: 0
      };
    }
    
    const aiSettings = settingsResult.data;
    console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò: ${aiSettings.provider} (${aiSettings.model})`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è API –∫–ª—é—á–∞
    if (!aiSettings.api_key) {
      console.log('‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò');
      return {
        success: false,
        error: 'API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
        tag: null,
        confidence: 0
      };
    }
    
    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö (—Ç–æ–ª—å–∫–æ –¥–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–≥–∏)
    const tagsResult = await supabaseClient.getAllTagsWithParents();
    if (!tagsResult.success || !tagsResult.data || tagsResult.data.length === 0) {
      console.log('‚ö†Ô∏è –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return {
        success: false,
        error: '–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        tag: null,
        confidence: 0
      };
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–≥–∏ (—Å parent_id –Ω–µ null)
    const availableTags = tagsResult.data.filter(tag => tag.parent_id !== null);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${availableTags.length} –¥–æ—á–µ—Ä–Ω–∏—Ö —Ç–µ–≥–æ–≤ –∏–∑ ${tagsResult.data.length} –æ–±—â–∏—Ö —Ç–µ–≥–æ–≤`);
    
    if (availableTags.length === 0) {
      console.log('‚ö†Ô∏è –î–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      return {
        success: false,
        error: '–î–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
        tag: null,
        confidence: 0
      };
    }
    
    // 4. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ò–ò –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const aiClient = new AIClient(aiSettings);
    const analysisResult = await aiClient.analyzeMessage(message, availableTags);
    
    if (!analysisResult.success) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò:', analysisResult.error);
      return analysisResult;
    }
    
    // 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    const matchedTags = analysisResult.tags || [];
    
    console.log(`‚úÖ –ò–ò –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: ${matchedTags.length}`);
    if (matchedTags.length > 0) {
      console.log(`üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–≥: ${matchedTags[0].title}`);
      if (matchedTags.length > 1) {
        console.log(`üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: ${matchedTags.slice(1).map(t => t.title).join(', ')}`);
      }
    }
    
    return {
      success: true,
      tags: matchedTags,
      primaryTag: matchedTags.length > 0 ? matchedTags[0] : null,
      confidence: analysisResult.confidence,
      rawResponse: analysisResult.rawResponse,
      aiSettings: {
        provider: aiSettings.provider,
        model: aiSettings.model
      }
    };
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò:', error.message);
    return {
      success: false,
      error: error.message,
      tags: [],
      primaryTag: null,
      confidence: 0
    };
  }
}


/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
 */
async function testAIFunctionality(supabaseClient) {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const settingsResult = await supabaseClient.getActiveAISettings();
    if (!settingsResult.success || !settingsResult.data) {
      return {
        success: false,
        error: '–ê–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      };
    }
    
    const aiSettings = settingsResult.data;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const aiClient = new AIClient(aiSettings);
    const connectionTest = await aiClient.testConnection();
    
    if (!connectionTest.success) {
      return {
        success: false,
        error: `–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${aiSettings.provider}: ${connectionTest.error}`
      };
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–≥–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const tagsResult = await supabaseClient.getAllTagsWithParents();
    if (!tagsResult.success || !tagsResult.data || tagsResult.data.length === 0) {
      return {
        success: false,
        error: '–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      };
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–≥–∏ (—Å parent_id –Ω–µ null)
    const availableTags = tagsResult.data.filter(tag => tag.parent_id !== null);
    
    if (availableTags.length === 0) {
      return {
        success: false,
        error: '–î–æ—á–µ—Ä–Ω–∏–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
      };
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const testMessage = '–∫—É–ø–∏–ª —Ö–ª–µ–± –≤ –º–∞–≥–∞–∑–∏–Ω–µ';
    const analysisResult = await aiClient.analyzeMessage(testMessage, availableTags);
    
    return {
      success: true,
      message: `–ò–ò-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${aiSettings.provider}, –ú–æ–¥–µ–ª—å: ${aiSettings.model}`,
      testAnalysis: analysisResult
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ò–ò-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:', error.message);
    return {
      success: false,
      error: error.message
    };
  }
}

module.exports = {
  analyzeMessageWithAI,
  testAIFunctionality
};
