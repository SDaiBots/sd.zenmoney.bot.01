const OpenAI = require('openai');
const axios = require('axios');

class AIClient {
  constructor(settings) {
    this.provider = settings.provider;
    this.model = settings.model;
    this.apiKey = settings.api_key;
    this.maxTokens = settings.max_tokens || 1000;
    this.temperature = settings.temperature || 0.3;
    this.timeout = settings.timeout || 30;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if (this.provider === 'openai') {
      this.openai = new OpenAI({
        apiKey: this.apiKey,
        timeout: this.timeout * 1000
      });
    }
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç–µ–≥–∞
   */
  async analyzeMessage(message, availableTags) {
    try {
      console.log(`ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${this.provider} (${this.model})...`);
      
      const prompt = this.generatePrompt(message, availableTags);
      
      let response;
      switch (this.provider) {
        case 'openai':
          response = await this.analyzeWithOpenAI(prompt);
          break;
        case 'perplexity':
          response = await this.analyzeWithPerplexity(prompt);
          break;
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò: ${this.provider}`);
      }
      
      return this.parseResponse(response);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ò:', error.message);
      return {
        success: false,
        error: error.message,
        tag: null,
        confidence: 0
      };
    }
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenAI API
   */
  async analyzeWithOpenAI(prompt) {
    const completion = await this.openai.chat.completions.create({
      model: this.model,
      messages: [
        {
          role: 'system',
          content: '–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞/–¥–æ—Ö–æ–¥–∞.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: this.maxTokens,
      temperature: this.temperature
    });
    
    return completion.choices[0]?.message?.content || '';
  }
  
  /**
   * –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Perplexity API
   */
  async analyzeWithPerplexity(prompt) {
    const response = await axios.post('https://api.perplexity.ai/chat/completions', {
      model: this.model,
      messages: [
        {
          role: 'system',
          content: '–¢—ã —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞/–¥–æ—Ö–æ–¥–∞.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: this.maxTokens,
      temperature: this.temperature
    }, {
      headers: {
        'Authorization': `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json'
      },
      timeout: this.timeout * 1000
    });
    
    return response.data.choices[0]?.message?.content || '';
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  generatePrompt(message, availableTags) {
    const tagsList = availableTags.map(tag => {
      let tagInfo = `- ${tag.title}`;
      if (tag.parent_title) {
        tagInfo += ` (–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${tag.parent_title})`;
      }
      if (tag.description) {
        tagInfo += ` - ${tag.description}`;
      }
      return tagInfo;
    }).join('\n');
    
    return `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–≥ (–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞/–¥–æ—Ö–æ–¥–∞) –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${message}"

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏:
${tagsList}

–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –í—ã–±–µ—Ä–∏ –û–î–ò–ù –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–≥
2. –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω–∏ "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
3. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞
4. –ù–µ –¥–æ–±–∞–≤–ª—è–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

–û—Ç–≤–µ—Ç:`;
  }
  
  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò
   */
  parseResponse(response) {
    try {
      const cleanResponse = response.trim();
      
      // –ï—Å–ª–∏ –ò–ò –≤–µ—Ä–Ω—É–ª "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ" –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
      if (!cleanResponse || cleanResponse.toLowerCase().includes('–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')) {
        return {
          success: true,
          tag: null,
          confidence: 0,
          rawResponse: response
        };
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
      // –≠—Ç–æ –±—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç–µ–≥–æ–≤
      
      return {
        success: true,
        tag: cleanResponse,
        confidence: 0.8, // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        rawResponse: response
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò:', error.message);
      return {
        success: false,
        error: error.message,
        tag: null,
        confidence: 0
      };
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò-—Å–µ—Ä–≤–∏—Å–∞
   */
  async testConnection() {
    try {
      const testPrompt = '–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –û—Ç–≤–µ—Ç—å "OK"';
      
      switch (this.provider) {
        case 'openai':
          await this.analyzeWithOpenAI(testPrompt);
          break;
        case 'perplexity':
          await this.analyzeWithPerplexity(testPrompt);
          break;
        default:
          throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${this.provider}`);
      }
      
      return { success: true };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${this.provider}:`, error.message);
      return { success: false, error: error.message };
    }
  }
}

module.exports = AIClient;
