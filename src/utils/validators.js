/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ZenMoney ID –≤ UUID
 */
function zenMoneyIdToUuid(zenMoneyId, userId = null) {
  try {
    // –ï—Å–ª–∏ ID —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (zenMoneyId.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i)) {
      return zenMoneyId;
    }
    
    // –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID —Å–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∏–π UUID —Å —É—á–µ—Ç–æ–º userId
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º MD5 —Ö–µ—à –æ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ userId –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    const crypto = require('crypto');
    const seedString = userId ? `zm-${zenMoneyId}-user-${userId}` : `zm-${zenMoneyId}`;
    const hash = crypto.createHash('md5').update(seedString).digest('hex');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º UUID –∏–∑ —Ö–µ—à–∞
    return [
      hash.substring(0, 8),
      hash.substring(8, 12),
      hash.substring(12, 16),
      hash.substring(16, 20),
      hash.substring(20, 32)
    ].join('-');
    
  } catch (error) {
    // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π UUID
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID:', error.message);
    const crypto = require('crypto');
    return crypto.randomUUID();
  }
}

/**
 * –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function parseTransactionFromMessage(messageText) {
  try {
    // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const tagMatch = messageText.match(/üõçÔ∏è (.+)/);
    const accountMatch = messageText.match(/üëõ (.+)/);
    const amountMatch = messageText.match(/üí≤ (.+)/);
    const commentMatch = messageText.match(/üí¨ (.+)/);
    
    if (!tagMatch || !accountMatch || !amountMatch || !commentMatch) {
      return null;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
    const amountStr = amountMatch[1].replace(/\s+/g, '').replace(',', '.');
    const amount = parseFloat(amountStr);
    
    if (isNaN(amount)) {
      return null;
    }
    
    const transactionData = {
      tag: {
        title: tagMatch[1].trim()
      },
      account: {
        name: accountMatch[1].trim()
      },
      amount: amount,
      formattedAmount: amountMatch[1].trim(),
      comment: commentMatch[1].trim()
    };
    
    return transactionData;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.message);
    return null;
  }
}

module.exports = {
  zenMoneyIdToUuid,
  parseTransactionFromMessage
};
