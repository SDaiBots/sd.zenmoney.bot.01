/**
 * –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram
 */
function escapeMarkdown(text) {
  if (!text) return '';
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
  return text.toString()
    .replace(/\*/g, '\\*')      // *
    .replace(/_/g, '\\_')      // _
    .replace(/\[/g, '\\[')     // [
    .replace(/\]/g, '\\]')     // ]
    .replace(/\(/g, '\\(')     // (
    .replace(/\)/g, '\\)')     // )
    .replace(/~/g, '\\~')      // ~
    .replace(/`/g, '\\`')      // `
    .replace(/>/g, '\\>')      // >
    .replace(/#/g, '\\#')     // #
    .replace(/\+/g, '\\+')     // +
    .replace(/-/g, '\\-')      // -
    .replace(/=/g, '\\=')      // =
    .replace(/\|/g, '\\|')     // |
    .replace(/\{/g, '\\{')     // {
    .replace(/\}/g, '\\}')     // }
    .replace(/\./g, '\\.')     // .
    .replace(/!/g, '\\!');     // !
}

/**
 * –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥ (–Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –¥–µ—Ñ–∏—Å—ã –≤ –∫–æ–º–∞–Ω–¥–∞—Ö)
 */
function escapeMarkdownForCommands(text) {
  if (!text) return '';
  
  // –°–Ω–∞—á–∞–ª–∞ –∑–∞—â–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–∏—Å–æ–≤
  const commandPattern = /(\/[a-zA-Z_]+-[a-zA-Z_]+)/g;
  const commands = text.match(commandPattern) || [];
  
  let result = text;
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
  commands.forEach((command, index) => {
    result = result.replace(command, `__COMMAND_${index}__`);
  });
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –¥–µ—Ñ–∏—Å–æ–≤
  result = result.toString()
    .replace(/\*/g, '\\*')      // *
    .replace(/_/g, '\\_')      // _
    .replace(/\[/g, '\\[')     // [
    .replace(/\]/g, '\\]')     // ]
    .replace(/\(/g, '\\(')     // (
    .replace(/\)/g, '\\)')     // )
    .replace(/~/g, '\\~')      // ~
    .replace(/`/g, '\\`')      // `
    .replace(/>/g, '\\>')      // >
    .replace(/#/g, '\\#')     // #
    .replace(/\+/g, '\\+')     // +
    .replace(/=/g, '\\=')      // =
    .replace(/\|/g, '\\|')     // |
    .replace(/\{/g, '\\{')     // {
    .replace(/\}/g, '\\}')     // }
    .replace(/\./g, '\\.')     // .
    .replace(/!/g, '\\!');     // !
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –º–µ—Å—Ç–æ
  commands.forEach((command, index) => {
    result = result.replace(`__COMMAND_${index}__`, command);
  });
  
  return result;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å—á–µ—Ç–∞
 */
function formatAccountDetails(account, index, total) {
  let text = `üí≥ –°—á–µ—Ç ${index} –∏–∑ ${total}\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è —Å—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ".. –ò–º—è–ü–∞—Ä–∞–º–µ—Ç—Ä–∞: –ó–Ω–∞—á–µ–Ω–∏–µ–ü–∞—Ä–∞–º–µ—Ç—Ä–∞"
  const fields = [
    'id', 'user', 'instrument', 'type', 'role', 'private', 'savings', 
    'title', 'inBalance', 'creditLimit', 'startBalance', 'balance', 
    'company', 'archive', 'enableCorrection', 'balanceCorrectionType', 
    'startDate', 'capitalization', 'percent', 'changed', 'syncID', 
    'enableSMS', 'endDateOffset', 'endDateOffsetInterval', 'payoffStep', 'payoffInterval'
  ];
  
  fields.forEach(field => {
    const value = account[field];
    if (value !== undefined && value !== null) {
      let displayValue = value;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π
      if (field === 'changed' && typeof value === 'number') {
        displayValue = new Date(value * 1000).toLocaleString('ru-RU');
      } else if (field === 'balance' || field === 'startBalance' || field === 'creditLimit') {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—É–º–º—ã
        displayValue = `${value} (${(value / 100).toFixed(2)})`;
      } else if (typeof value === 'boolean') {
        displayValue = value ? '–¥–∞' : '–Ω–µ—Ç';
      } else if (typeof value === 'object') {
        displayValue = JSON.stringify(value);
      }
      
      text += `.. ${field}: ${displayValue}\n`;
    }
  });
  
  return text;
}

module.exports = {
  escapeMarkdown,
  escapeMarkdownForCommands,
  formatAccountDetails
};
