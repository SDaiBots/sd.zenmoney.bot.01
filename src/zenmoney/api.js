const axios = require('axios');

class ZenMoneyAPI {
  constructor() {
    this.baseURL = process.env.ZENMONEY_API_BASE_URL || 'https://api.zenmoney.ru';
    this.accessToken = process.env.ZENMONEY_TOKEN;
    
    if (!this.accessToken) {
      throw new Error('ZENMONEY_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    this.client = axios.create({
      baseURL: this.baseURL,
      headers: {
        'Authorization': `Bearer ${this.accessToken}`,
        'Content-Type': 'application/json',
        'User-Agent': 'PellaZenMoneyBot/1.0'
      },
      timeout: 30000
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ ZenMoney
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ POST /v8/diff –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  async getDictionaries() {
    try {
      console.log('üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ ZenMoney...');
      
      const currentTimestamp = Math.floor(Date.now() / 1000);
      
      const response = await this.client.post('/v8/diff', {
        currentClientTimestamp: currentTimestamp,
        serverTimestamp: 0 // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      });

      console.log('‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      return this.parseDictionaries(response.data);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
   */
  parseDictionaries(data) {
    const dictionaries = {
      categories: [],
      wallets: [],
      tags: [],
      transactions: [],
      lastServerTimestamp: data.serverTimestamp
    };

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (data.categories) {
      dictionaries.categories = Object.values(data.categories).map(category => ({
        id: category.id,
        title: category.title,
        parent: category.parent,
        type: category.type, // 'income' –∏–ª–∏ 'outcome'
        isSystem: category.isSystem || false
      }));
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏/—Å—á–µ—Ç–∞
    if (data.accounts) {
      dictionaries.wallets = Object.values(data.accounts).map(account => ({
        id: account.id,
        title: account.title,
        type: account.type,
        currency: account.currency,
        balance: account.balance,
        isArchived: account.isArchived || false
      }));
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–≥–∏
    if (data.tags) {
      dictionaries.tags = Object.values(data.tags).map(tag => ({
        id: tag.id,
        title: tag.title,
        color: tag.color
      }));
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏)
    if (data.transactions) {
      dictionaries.transactions = Object.values(data.transactions).map(transaction => ({
        id: transaction.id,
        date: transaction.date,
        amount: transaction.amount,
        category: transaction.category,
        account: transaction.account,
        comment: transaction.comment
      }));
    }

    return dictionaries;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async getCategories() {
    const dictionaries = await this.getDictionaries();
    return dictionaries.categories;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  async getWallets() {
    const dictionaries = await this.getDictionaries();
    return dictionaries.wallets;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤
   */
  async getTags() {
    const dictionaries = await this.getDictionaries();
    return dictionaries.tags;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async createTransaction(transactionData) {
    try {
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ ZenMoney...');
      
      const currentTimestamp = Math.floor(Date.now() / 1000);
      
      const response = await this.client.post('/v8/diff', {
        currentClientTimestamp: currentTimestamp,
        serverTimestamp: 0,
        transactions: [transactionData]
      });

      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      return response.data;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.response?.data || error.message);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
   */
  async testConnection() {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ZenMoney API...');
      
      const dictionaries = await this.getDictionaries();
      
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ZenMoney API —É—Å–ø–µ—à–Ω–æ');
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ: ${dictionaries.categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π, ${dictionaries.wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤, ${dictionaries.tags.length} —Ç–µ–≥–æ–≤`);
      
      return {
        success: true,
        categories: dictionaries.categories.length,
        wallets: dictionaries.wallets.length,
        tags: dictionaries.tags.length,
        lastServerTimestamp: dictionaries.lastServerTimestamp
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ZenMoney API:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = ZenMoneyAPI;
