const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

class SupabaseClient {
  constructor() {
    const projectId = process.env.SB_PROJECT_ID;
    const token = process.env.SB_TOKEN;
    
    if (!projectId || !token) {
      throw new Error('SB_PROJECT_ID –∏ SB_TOKEN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    const supabaseUrl = `https://${projectId}.supabase.co`;
    
    this.client = createClient(supabaseUrl, token);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
   */
  getClient() {
    return this.client;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
   */
  async testConnection() {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
      
      const { data, error } = await this.client
        .from('zm_accounts')
        .select('count')
        .limit(1);
      
      if (error) {
        throw error;
      }
      
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã zm_accounts
   */
  async clearAccounts() {
    try {
      console.log('üîÑ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É zm_accounts...');
      
      const { error } = await this.client
        .from('zm_accounts')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      
      if (error) {
        throw error;
      }
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ zm_accounts –æ—á–∏—â–µ–Ω–∞');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã zm_accounts:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ —Å—á–µ—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É zm_accounts
   */
  async insertAccounts(accounts) {
    try {
      console.log(`üîÑ –í—Å—Ç–∞–≤–ª—è–µ–º ${accounts.length} —Å—á–µ—Ç–æ–≤ –≤ Supabase...`);
      
      const { data, error } = await this.client
        .from('zm_accounts')
        .insert(accounts);
      
      if (error) {
        throw error;
      }
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${accounts.length} —Å—á–µ—Ç–æ–≤`);
      return { success: true, data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å—á–µ—Ç–æ–≤:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
   */
  async getAllAccounts() {
    try {
      const { data, error } = await this.client
        .from('zm_accounts')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) {
        throw error;
      }
      
      return { success: true, data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã zm_tags
   */
  async clearTags() {
    try {
      console.log('üîÑ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É zm_tags...');
      
      const { error } = await this.client
        .from('zm_tags')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      
      if (error) {
        throw error;
      }
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ zm_tags –æ—á–∏—â–µ–Ω–∞');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã zm_tags:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–≥–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É zm_tags
   */
  async insertTags(tags) {
    try {
      console.log(`üîÑ –í—Å—Ç–∞–≤–ª—è–µ–º ${tags.length} —Ç–µ–≥–æ–≤ –≤ Supabase...`);
      
      const { data, error } = await this.client
        .from('zm_tags')
        .insert(tags);
      
      if (error) {
        throw error;
      }
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${tags.length} —Ç–µ–≥–æ–≤`);
      return { success: true, data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç–µ–≥–æ–≤:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–≥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–≥–∞—Ö
   */
  async getAllTagsWithParents() {
    try {
      const { data, error } = await this.client
        .from('zm_tags')
        .select(`
          *,
          parent_tag:parent_id (
            id,
            title,
            color,
            icon
          )
        `)
        .order('created_at', { ascending: false });
      
      if (error) {
        throw error;
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const tagsWithParents = data.map(tag => ({
        ...tag,
        parent_title: tag.parent_tag?.title || null,
        parent_color: tag.parent_tag?.color || null,
        parent_icon: tag.parent_tag?.icon || null
      }));
      
      return { success: true, data: tagsWithParents };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤ —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò
   */
  async getActiveAISettings() {
    try {
      const { data, error } = await this.client
        .from('ai_settings')
        .select('*')
        .eq('is_active', true)
        .single();
      
      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        throw error;
      }
      
      return { success: true, data: data || null };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò:', error.message);
      return { success: false, error: error.message, data: null };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò
   */
  async updateAISettings(id, settings) {
    try {
      const { data, error } = await this.client
        .from('ai_settings')
        .update({
          ...settings,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select()
        .single();
      
      if (error) {
        throw error;
      }
      
      return { success: true, data };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò —Å ID ${id}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ)
   */
  async activateAISettings(id) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      await this.client
        .from('ai_settings')
        .update({ is_active: false })
        .neq('id', '00000000-0000-0000-0000-000000000000'); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      
      // –ó–∞—Ç–µ–º –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é
      const { data, error } = await this.client
        .from('ai_settings')
        .update({ 
          is_active: true,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select()
        .single();
      
      if (error) {
        throw error;
      }
      
      return { success: true, data };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò —Å ID ${id}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ò–ò
   */
  async createAISettings(settings) {
    try {
      const defaultSettings = {
        provider: 'openai',
        model: 'gpt-3.5-turbo',
        max_tokens: 1000,
        temperature: 0.3,
        timeout: 30,
        is_active: false,
        description: '–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò',
        ...settings
      };
      
      const { data, error } = await this.client
        .from('ai_settings')
        .insert(defaultSettings)
        .select()
        .single();
      
      if (error) {
        throw error;
      }
      
      return { success: true, data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∏–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
   */
  async getSetting(parameterName) {
    try {
      console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É: ${parameterName}`);
      
      const { data, error } = await this.client
        .from('settings')
        .select('parameter_value')
        .eq('parameter_name', parameterName)
        .single();
      
      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        throw error;
      }
      
      const value = data?.parameter_value || null;
      console.log(`üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${parameterName}: ${value}`);
      
      return { 
        success: true, 
        value: value,
        exists: !!data
      };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${parameterName}:`, error.message);
      return { 
        success: false, 
        error: error.message,
        value: null,
        exists: false
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  async updateSetting(parameterName, parameterValue) {
    try {
      console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É: ${parameterName} = ${parameterValue}`);
      
      const { data, error } = await this.client
        .from('settings')
        .upsert({
          parameter_name: parameterName,
          parameter_value: parameterValue,
          updated_at: new Date().toISOString()
        })
        .select()
        .single();
      
      if (error) {
        throw error;
      }
      
      console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${parameterName} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
      return { success: true, data };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${parameterName}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  async getAllSettings() {
    try {
      const { data, error } = await this.client
        .from('settings')
        .select('*')
        .order('parameter_name');
      
      if (error) {
        throw error;
      }
      
      return { success: true, data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  async getAccountByName(accountName) {
    try {
      console.log(`üîç –ò—â–µ–º —Å—á–µ—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: ${accountName}`);
      
      const { data, error } = await this.client
        .from('zm_accounts')
        .select('*')
        .eq('title', accountName)
        .eq('archive', false)
        .single();
      
      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        throw error;
      }
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω —Å—á–µ—Ç:`, data ? `${data.title} (${data.instrument_id})` : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
      
      return { 
        success: true, 
        data: data || null,
        exists: !!data
      };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—á–µ—Ç–∞ ${accountName}:`, error.message);
      return { 
        success: false, 
        error: error.message,
        data: null,
        exists: false
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã –ø–æ instrument_id
   * –ü–æ–∫–∞ —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—ã instruments –Ω–µ—Ç
   */
  async getCurrencyByInstrumentId(instrumentId) {
    try {
      console.log(`üîç –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É –ø–æ instrument_id: ${instrumentId}`);
      
      // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞–ø–ø–∏–Ω–≥, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—ã instruments –Ω–µ—Ç
      const currencyMap = {
        10548: 'RUB',  // –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å
        11519: 'UZS',  // –£–∑–±–µ–∫—Å–∫–∏–π —Å—É–º  
        11902: 'EUR',  // –ï–≤—Ä–æ
        11903: 'USD',  // –î–æ–ª–ª–∞—Ä –°–®–ê (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º)
        11904: 'KZT'   // –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º)
      };
      
      const currency = currencyMap[instrumentId] || 'RUB';
      console.log(`üí± –í–∞–ª—é—Ç–∞ –¥–ª—è instrument_id ${instrumentId}: ${currency}`);
      
      return { 
        success: true, 
        currency: currency
      };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–ª—é—Ç—ã –¥–ª—è instrument_id ${instrumentId}:`, error.message);
      return { 
        success: false, 
        error: error.message,
        currency: 'RUB'
      };
    }
  }
}

module.exports = SupabaseClient;
