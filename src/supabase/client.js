const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

class SupabaseClient {
  constructor() {
    const projectId = process.env.SB_PROJECT_ID;
    const token = process.env.SB_TOKEN;
    
    if (!projectId || !token) {
      throw new Error('SB_PROJECT_ID –∏ SB_TOKEN –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    const supabaseUrl = `https://${projectId}.supabase.co`;
    
    this.client = createClient(supabaseUrl, token);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ Supabase
   */
  getClient() {
    return this.client;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
   */
  async testConnection() {
    try {
      console.log('üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
      
      const { data, error } = await this.client
        .from('zm_accounts')
        .select('count')
        .limit(1);
      
      if (error) {
        throw error;
      }
      
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã zm_accounts
   */
  async clearAccounts() {
    try {
      console.log('üîÑ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É zm_accounts...');
      
      const { error } = await this.client
        .from('zm_accounts')
        .delete()
        .neq('id', '00000000-0000-0000-0000-000000000000'); // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
      
      if (error) {
        throw error;
      }
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ zm_accounts –æ—á–∏—â–µ–Ω–∞');
      return { success: true };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã zm_accounts:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –í—Å—Ç–∞–≤–∫–∞ —Å—á–µ—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É zm_accounts
   */
  async insertAccounts(accounts) {
    try {
      console.log(`üîÑ –í—Å—Ç–∞–≤–ª—è–µ–º ${accounts.length} —Å—á–µ—Ç–æ–≤ –≤ Supabase...`);
      
      const { data, error } = await this.client
        .from('zm_accounts')
        .insert(accounts);
      
      if (error) {
        throw error;
      }
      
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ ${accounts.length} —Å—á–µ—Ç–æ–≤`);
      return { success: true, data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Å—á–µ—Ç–æ–≤:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—á–µ—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
   */
  async getAllAccounts() {
    try {
      const { data, error } = await this.client
        .from('zm_accounts')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) {
        throw error;
      }
      
      return { success: true, data };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤:', error.message);
      return { success: false, error: error.message };
    }
  }
}

module.exports = SupabaseClient;
