const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const SupabaseClient = require('./src/supabase/client');
const { analyzeMessageWithAI } = require('./src/ai/analyzer');
const { createUnifiedTransactionMessage, createUnifiedTransactionKeyboard, updateMessageWithNewTag, updateMessageWithNewAccount } = require('./src/message/unified');
const { createZenMoneyTransactionStructure, createTransactionInZenMoney, formatTransactionForDisplay } = require('./src/zenmoney/transaction');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3000;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const token = process.env.TELEGRAM_BOT_TOKEN;
if (!token) {
  console.error('–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: false });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
let supabaseClient;
try {
  supabaseClient = new SupabaseClient();
  console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
  console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
}

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
app.use(express.json());

// –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const messageCounters = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–µ–≥–æ–≤ –æ—Ç –ò–ò –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const aiTagsStorage = new Map();

// –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
async function downloadVoiceFile(fileId) {
  try {
    console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª: ${fileId}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const fileInfo = await bot.getFile(fileId);
    if (!fileInfo || !fileInfo.file_path) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ');
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const fileUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const response = await axios.get(fileUrl, {
      responseType: 'arraybuffer',
      timeout: 30000
    });
    
    console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${response.data.length} –±–∞–π—Ç`);
    return response.data;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Whisper
async function transcribeVoice(audioBuffer) {
  try {
    console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    const OpenAI = require('openai');
    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY
    });
    
    // –°–æ–∑–¥–∞–µ–º File –æ–±—ä–µ–∫—Ç –¥–ª—è OpenAI API
    const audioFile = new File([audioBuffer], 'voice.ogg', {
      type: 'audio/ogg'
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Whisper API
    const response = await openai.audio.transcriptions.create({
      file: audioFile,
      model: 'whisper-1',
      language: 'ru', // –£–∫–∞–∑—ã–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
      prompt: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–∞—Å—Ö–æ–¥ –¥–æ—Ö–æ–¥ —Å—É–º–º–∞ –º–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç—ã. –ß–∏—Å–ª–∞ –≤—Å–µ–≥–¥–∞ –ø–∏—à–∏ —Ü–∏—Ñ—Ä–∞–º–∏ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏: —Å—Ç–æ —Ç—ã—Å—è—á = 100 000, –¥–≤–∞ –º–∏–ª–ª–∏–æ–Ω–∞ = 2 000 000, —Ç—ã—Å—è—á–∞ —Å—Ç–æ = 1 100, –ø—è—Ç—å—Å–æ—Ç = 500, —Ç—ã—Å—è—á–∞ = 1 000, –¥–≤–∞–¥—Ü–∞—Ç—å —Ç—ã—Å—è—á = 20 000'
    });
    
    const transcribedText = response.text.trim();
    console.log(`‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: "${transcribedText}"`);
    
    return transcribedText;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function handleVoiceMessage(chatId, voice, user, fullUserName) {
  try {
    console.log(`üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fullUserName}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processingMessage = await bot.sendMessage(chatId, 'üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    
    // –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
    const audioBuffer = await downloadVoiceFile(voice.file_id);
    
    // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å
    const transcribedText = await transcribeVoice(audioBuffer);
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await bot.deleteMessage(chatId, processingMessage.message_id);
    
    if (!transcribedText || transcribedText.trim() === '') {
      await bot.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    await bot.sendMessage(chatId, `üé§ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*\n"${transcribedText}"`, { parse_mode: 'Markdown' });
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await handleTransactionWithAI(chatId, transcribedText, user, fullUserName, true);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.';
    
    if (error.message.includes('timeout')) {
      errorMessage = '‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.';
    } else if (error.message.includes('API key')) {
      errorMessage = 'üîë –û—à–∏–±–∫–∞ API –∫–ª—é—á–∞ OpenAI. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
    } else if (error.message.includes('file')) {
      errorMessage = 'üìÅ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    }
    
    await bot.sendMessage(chatId, errorMessage);
  }
}


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    
    if (update.message) {
      await handleMessage(update.message);
    }
    
    if (update.callback_query) {
      handleCallbackQuery(update.callback_query);
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:', error);
    res.status(500).send('Internal Server Error');
  }
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function isUserAllowed(userId, username) {
  try {
    if (!supabaseClient) {
      console.warn('‚ö†Ô∏è Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
      return true;
    }

    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É 'user' –∏–∑ Supabase
    const userSettingResult = await supabaseClient.getSetting('user');
    
    if (!userSettingResult.success || !userSettingResult.value) {
      console.warn('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "user" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
      return true;
    }

    const allowedUser = userSettingResult.value.trim();
    const currentUserId = userId.toString();
    const currentUsername = username || '';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username
    const isAllowed = currentUserId === allowedUser || currentUsername === allowedUser;
    
    if (!isAllowed) {
      console.log(`üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID=${currentUserId}, username=${currentUsername}`);
      console.log(`üîí –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${allowedUser}`);
    } else {
      console.log(`‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID=${currentUserId}, username=${currentUsername}`);
    }

    return isAllowed;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return true;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message) {
  const chatId = message.chat.id;
  const messageId = message.message_id;
  const text = message.text;
  const voice = message.voice;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  const user = message.from;
  const userName = user.first_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const userLastName = user.last_name ? ` ${user.last_name}` : '';
  const fullUserName = `${userName}${userLastName}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  const isAllowed = await isUserAllowed(user.id, user.username);
  
  if (!isAllowed) {
    console.log(`üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${fullUserName} (ID: ${user.id})`);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
  if (text && text.startsWith('/')) {
    handleCommand(message);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (voice) {
    await handleVoiceMessage(chatId, voice, user, fullUserName);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º
  if (text) {
    handleTransactionWithAI(chatId, text, user, fullUserName);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º
async function handleTransactionWithAI(chatId, text, user, fullUserName, isVoiceMessage = false) {
  try {
    console.log(`ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${fullUserName}: "${text}"`);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Supabase
    let settings = {};
    if (supabaseClient) {
      try {
        const defaultCardResult = await supabaseClient.getSetting('default_card');
        const defaultCashResult = await supabaseClient.getSetting('default_cash');
        
        settings = {
          default_card: (defaultCardResult.success && defaultCardResult.value && defaultCardResult.value.trim() !== '') 
            ? defaultCardResult.value.trim() 
            : '–ö–∞—Ä—Ç–∞',
          default_cash: (defaultCashResult.success && defaultCashResult.value && defaultCashResult.value.trim() !== '') 
            ? defaultCashResult.value.trim() 
            : '–ë—É–º–∞–∂–Ω–∏–∫'
        };
      } catch (settingsError) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', settingsError.message);
      }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑
    const aiResult = await analyzeMessageWithAI(text, supabaseClient);
    
    // –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const unifiedResult = await createUnifiedTransactionMessage(text, aiResult, settings, supabaseClient, isVoiceMessage);
    
    if (!unifiedResult.success) {
      throw new Error(unifiedResult.error);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–≥–∞–º–∏ –æ—Ç –ò–ò
    const keyboard = createUnifiedTransactionKeyboard(unifiedResult.transactionData, unifiedResult.hasMultipleTags, unifiedResult.aiTags);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = await bot.sendMessage(chatId, unifiedResult.messageText, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${fullUserName} (ID: ${user.id})`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageKey = `${chatId}_${message.message_id}`;
    aiTagsStorage.set(messageKey, unifiedResult.aiTags);
    
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageKey}:`, unifiedResult.aiTags.map(t => t.title));
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ò–ò:', error.message);
    
    // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`)
      .then(() => {
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${fullUserName}`);
      })
      .catch((sendError) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', sendError);
      });
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò
async function sendAIResponse(chatId, aiResult, originalMessage) {
  try {
    const tags = aiResult.tags || [];
    const primaryTag = aiResult.primaryTag;
    
    if (tags.length === 0) {
      const aiMessage = `ü§ñ *–ò–ò –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é*

üîß *–ú–æ–¥–µ–ª—å:* ${escapeMarkdown(aiResult.aiSettings.provider)} (${escapeMarkdown(aiResult.aiSettings.model)})

üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.`;
      
      await bot.sendMessage(chatId, aiMessage, { parse_mode: 'Markdown' });
      console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ò–ò: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞');
      return;
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let aiMessage;
    if (tags.length === 1) {
      // –û–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç - –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
      aiMessage = `ü§ñ *–ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é:* ${escapeMarkdown(primaryTag.title)}
      
üìä *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* ${Math.round(aiResult.confidence * 100)}%
üîß *–ú–æ–¥–µ–ª—å:* ${escapeMarkdown(aiResult.aiSettings.provider)} (${escapeMarkdown(aiResult.aiSettings.model)})

‚úÖ –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ - –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç.`;
    } else {
      // –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      aiMessage = `ü§ñ *–ò–ò –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é:* ${escapeMarkdown(primaryTag.title)}
      
üìä *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* ${Math.round(aiResult.confidence * 100)}%
üîß *–ú–æ–¥–µ–ª—å:* ${escapeMarkdown(aiResult.aiSettings.provider)} (${escapeMarkdown(aiResult.aiSettings.model)})

üí° –ù–∞–π–¥–µ–Ω–æ ${tags.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π:`;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–µ–≥–æ–≤ (–º–∞–∫—Å–∏–º—É–º 5)
    const inlineKeyboard = createAITagsKeyboard(tags.slice(0, 5));
    
    await bot.sendMessage(chatId, aiMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: inlineKeyboard
      }
    });
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ò–ò —Å ${tags.length} –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–µ–≥–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ò–ò:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Ç–µ–≥–æ–≤ –ò–ò
function createAITagsKeyboard(tags) {
  const keyboard = [];
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥—É
  for (let i = 0; i < tags.length; i += 2) {
    const row = [];
    
    // –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    row.push({
      text: `üéØ ${tags[i].title}`,
      callback_data: `ai_tag_${tags[i].id}`
    });
    
    // –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (i + 1 < tags.length) {
      row.push({
        text: `üéØ ${tags[i + 1].title}`,
        callback_data: `ai_tag_${tags[i + 1].id}`
      });
    }
    
    keyboard.push(row);
  }
  
  return keyboard;
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Telegram
function escapeMarkdown(text) {
  if (!text) return '';
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
  return text.toString()
    .replace(/\*/g, '\\*')      // *
    .replace(/_/g, '\\_')      // _
    .replace(/\[/g, '\\[')     // [
    .replace(/\]/g, '\\]')     // ]
    .replace(/\(/g, '\\(')     // (
    .replace(/\)/g, '\\)')     // )
    .replace(/~/g, '\\~')      // ~
    .replace(/`/g, '\\`')      // `
    .replace(/>/g, '\\>')      // >
    .replace(/#/g, '\\#')     // #
    .replace(/\+/g, '\\+')     // +
    .replace(/-/g, '\\-')      // -
    .replace(/=/g, '\\=')      // =
    .replace(/\|/g, '\\|')     // |
    .replace(/\{/g, '\\{')     // {
    .replace(/\}/g, '\\}')     // }
    .replace(/\./g, '\\.')     // .
    .replace(/!/g, '\\!');     // !
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥ (–Ω–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –¥–µ—Ñ–∏—Å—ã –≤ –∫–æ–º–∞–Ω–¥–∞—Ö)
function escapeMarkdownForCommands(text) {
  if (!text) return '';
  
  // –°–Ω–∞—á–∞–ª–∞ –∑–∞—â–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ñ–∏—Å–æ–≤
  const commandPattern = /(\/[a-zA-Z_]+-[a-zA-Z_]+)/g;
  const commands = text.match(commandPattern) || [];
  
  let result = text;
  
  // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
  commands.forEach((command, index) => {
    result = result.replace(command, `__COMMAND_${index}__`);
  });
  
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –¥–µ—Ñ–∏—Å–æ–≤
  result = result.toString()
    .replace(/\*/g, '\\*')      // *
    .replace(/_/g, '\\_')      // _
    .replace(/\[/g, '\\[')     // [
    .replace(/\]/g, '\\]')     // ]
    .replace(/\(/g, '\\(')     // (
    .replace(/\)/g, '\\)')     // )
    .replace(/~/g, '\\~')      // ~
    .replace(/`/g, '\\`')      // `
    .replace(/>/g, '\\>')      // >
    .replace(/#/g, '\\#')     // #
    .replace(/\+/g, '\\+')     // +
    .replace(/=/g, '\\=')      // =
    .replace(/\|/g, '\\|')     // |
    .replace(/\{/g, '\\{')     // {
    .replace(/\}/g, '\\}')     // }
    .replace(/\./g, '\\.')     // .
    .replace(/!/g, '\\!');     // !
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –º–µ—Å—Ç–æ
  commands.forEach((command, index) => {
    result = result.replace(`__COMMAND_${index}__`, command);
  });
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
function handleCommand(message) {
  const chatId = message.chat.id;
  const text = message.text;
  const user = message.from;
  const userName = user.first_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  switch (text) {
    case '/start':
      handleStartCommand(chatId, userName);
      break;
    case '/accounts':
      handleAccountsCommand(chatId, userName);
      break;
    case '/accounts_upd':
      handleAccountsUpdCommand(chatId, userName);
      break;
    case '/tags_upd':
      handleTagsUpdCommand(chatId, userName);
      break;
    case '/ai_settings':
      handleAISettingsCommand(chatId, userName);
      break;
    case '/ai_test':
      handleAITestCommand(chatId, userName);
      break;
    default:
      bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
function handleStartCommand(chatId, userName) {
  const welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ZenMoney Bot, ${escapeMarkdown(userName)}!

üí∞ *–û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ò–ò-–∞–Ω–∞–ª–∏–∑–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–º–µ–Ω–∏—Ç—å, –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.

ü§ñ *–ò–ò-—Ñ—É–Ω–∫—Ü–∏–∏:*
–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞/–¥–æ—Ö–æ–¥–∞.

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/accounts - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞ –∏–∑ ZenMoney
/accounts\\_upd - –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç–∞ –≤ Supabase
/tags\\_upd - –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥–∏ –≤ Supabase
/ai\\_settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
/ai\\_test - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò

üí° *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç—Ä–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ö—É–ø–∏–ª —Ö–ª–µ–± –≤ –º–∞–≥–∞–∑–∏–Ω–µ"`;
  
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' })
    .then(() => {
      console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName}`);
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accounts
async function handleAccountsCommand(chatId, userName) {
  const zenMoneyToken = process.env.ZENMONEY_TOKEN;
  
  if (!zenMoneyToken) {
    bot.sendMessage(chatId, 'ZenMoney API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ZENMONEY_TOKEN.');
    return;
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    const loadingMessage = await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞ –∏–∑ ZenMoney...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ZenMoney API
    const currentTimestamp = Math.floor(Date.now() / 1000);
    
    const response = await axios.post('https://api.zenmoney.ru/v8/diff', {
      currentClientTimestamp: currentTimestamp,
      serverTimestamp: 0
    }, {
      headers: {
        'Authorization': `Bearer ${zenMoneyToken}`,
        'Content-Type': 'application/json',
        'User-Agent': 'PellaZenMoneyBot/1.0'
      },
      timeout: 30000
    });
    
    const data = response.data;
    const accounts = data.account || {};
    
    if (Object.keys(accounts).length === 0) {
      await bot.editMessageText('–°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await bot.deleteMessage(chatId, loadingMessage.message_id);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å—á–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    const accountList = Object.values(accounts);
    
    for (let i = 0; i < accountList.length; i++) {
      const account = accountList[i];
      const accountText = formatAccountDetails(account, i + 1, accountList.length);
      
      await bot.sendMessage(chatId, accountText);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
      if (i < accountList.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }
    
    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName} (${Object.keys(accounts).length} —Å—á–µ—Ç–æ–≤)`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤:', error);
    await bot.editMessageText('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤ –∏–∑ ZenMoney. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
      chat_id: chatId,
      message_id: loadingMessage.message_id
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å—á–µ—Ç–∞
function formatAccountDetails(account, index, total) {
  let text = `üí≥ –°—á–µ—Ç ${index} –∏–∑ ${total}\n\n`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è —Å—á–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ".. –ò–º—è–ü–∞—Ä–∞–º–µ—Ç—Ä–∞: –ó–Ω–∞—á–µ–Ω–∏–µ–ü–∞—Ä–∞–º–µ—Ç—Ä–∞"
  const fields = [
    'id', 'user', 'instrument', 'type', 'role', 'private', 'savings', 
    'title', 'inBalance', 'creditLimit', 'startBalance', 'balance', 
    'company', 'archive', 'enableCorrection', 'balanceCorrectionType', 
    'startDate', 'capitalization', 'percent', 'changed', 'syncID', 
    'enableSMS', 'endDateOffset', 'endDateOffsetInterval', 'payoffStep', 'payoffInterval'
  ];
  
  fields.forEach(field => {
    const value = account[field];
    if (value !== undefined && value !== null) {
      let displayValue = value;
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π
      if (field === 'changed' && typeof value === 'number') {
        displayValue = new Date(value * 1000).toLocaleString('ru-RU');
      } else if (field === 'balance' || field === 'startBalance' || field === 'creditLimit') {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—É–º–º—ã
        displayValue = `${value} (${(value / 100).toFixed(2)})`;
      } else if (typeof value === 'boolean') {
        displayValue = value ? '–¥–∞' : '–Ω–µ—Ç';
      } else if (typeof value === 'object') {
        displayValue = JSON.stringify(value);
      }
      
      text += `.. ${field}: ${displayValue}\n`;
    }
  });
  
  return text;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accounts_upd
async function handleAccountsUpdCommand(chatId, userName) {
  const zenMoneyToken = process.env.ZENMONEY_TOKEN;
  
  if (!zenMoneyToken) {
    bot.sendMessage(chatId, 'ZenMoney API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ZENMONEY_TOKEN.');
    return;
  }
  
  if (!supabaseClient) {
    bot.sendMessage(chatId, 'Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SB_PROJECT_ID –∏ SB_TOKEN.');
    return;
  }
  
  // –û–±—ä—è–≤–ª—è–µ–º loadingMessage –≤–Ω–µ try-catch –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ catch
  let loadingMessage;
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    loadingMessage = await bot.sendMessage(chatId, 'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –≤ Supabase...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ZenMoney API
    const currentTimestamp = Math.floor(Date.now() / 1000);
    
    const response = await axios.post('https://api.zenmoney.ru/v8/diff', {
      currentClientTimestamp: currentTimestamp,
      serverTimestamp: 0
    }, {
      headers: {
        'Authorization': `Bearer ${zenMoneyToken}`,
        'Content-Type': 'application/json',
        'User-Agent': 'PellaZenMoneyBot/1.0'
      },
      timeout: 30000
    });
    
    const data = response.data;
    const accounts = data.account || {};
    
    if (Object.keys(accounts).length === 0) {
      await bot.editMessageText('‚ùå –°—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ZenMoney', {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await bot.editMessageText('üîÑ –ü–æ–ª—É—á–µ–Ω—ã —Å—á–µ—Ç–∞ –∏–∑ ZenMoney. –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Supabase...', {
      chat_id: chatId,
      message_id: loadingMessage.message_id
    });
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Supabase
    const clearResult = await supabaseClient.clearAccounts();
    if (!clearResult.success) {
      await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: ${clearResult.error}`, {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await bot.editMessageText('üîÑ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—á–µ—Ç–∞ –≤ Supabase...', {
      chat_id: chatId,
      message_id: loadingMessage.message_id
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—á–µ—Ç–∞ –¥–ª—è Supabase
    const accountsForSupabase = Object.values(accounts).map(account => {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
      let startDate = null;
      if (account.startDate && typeof account.startDate === 'number' && account.startDate > 0) {
        try {
          const date = new Date(account.startDate * 1000);
          if (!isNaN(date.getTime())) {
            startDate = date.toISOString().split('T')[0];
          }
        } catch (error) {
          console.warn(`–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ startDate –¥–ª—è —Å—á–µ—Ç–∞ ${account.id}:`, account.startDate);
        }
      }

      return {
        id: account.id,
        user_id: account.user,
        instrument_id: account.instrument,
        type: account.type,
        title: account.title,
        balance: account.balance || 0,
        start_balance: account.startBalance || 0,
        credit_limit: account.creditLimit || 0,
        in_balance: account.inBalance !== false,
        private: account.private === true,
        savings: account.savings === true,
        archive: account.archive === true,
        enable_correction: account.enableCorrection !== false,
        enable_sms: account.enableSMS === true,
        balance_correction_type: account.balanceCorrectionType,
        capitalization: account.capitalization,
        percent: account.percent,
        start_date: startDate,
        end_date_offset: account.endDateOffset,
        end_date_offset_interval: account.endDateOffsetInterval,
        payoff_step: account.payoffStep,
        payoff_interval: account.payoffInterval,
        company_id: account.company,
        role: account.role,
        sync_id: account.syncID,
        changed: account.changed
      };
    });
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Å—á–µ—Ç–∞ –≤ Supabase
    const insertResult = await supabaseClient.insertAccounts(accountsForSupabase);
    if (!insertResult.success) {
      await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—á–µ—Ç–æ–≤: ${insertResult.error}`, {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
      return;
    }
    
    // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await bot.editMessageText(`‚úÖ –°—á–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Supabase!\n\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${accountsForSupabase.length} —Å—á–µ—Ç–æ–≤`, {
      chat_id: chatId,
      message_id: loadingMessage.message_id
    });
    
    console.log(`–°—á–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Supabase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userName} (${accountsForSupabase.length} —Å—á–µ—Ç–æ–≤)`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ loadingMessage —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (loadingMessage) {
      try {
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
          chat_id: chatId,
          message_id: loadingMessage.message_id
        });
      } catch (editError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', editError);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } else {
      // –ï—Å–ª–∏ loadingMessage –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tags_upd
async function handleTagsUpdCommand(chatId, userName) {
  const zenMoneyToken = process.env.ZENMONEY_TOKEN;
  
  if (!zenMoneyToken) {
    bot.sendMessage(chatId, 'ZenMoney API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ZENMONEY_TOKEN.');
    return;
  }
  
  if (!supabaseClient) {
    bot.sendMessage(chatId, 'Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SB_PROJECT_ID –∏ SB_TOKEN.');
    return;
  }
  
  // –û–±—ä—è–≤–ª—è–µ–º loadingMessage –≤–Ω–µ try-catch –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ catch
  let loadingMessage;
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    loadingMessage = await bot.sendMessage(chatId, 'üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ Supabase...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ZenMoney API
    const currentTimestamp = Math.floor(Date.now() / 1000);
    
    const response = await axios.post('https://api.zenmoney.ru/v8/diff', {
      currentClientTimestamp: currentTimestamp,
      serverTimestamp: 0
    }, {
      headers: {
        'Authorization': `Bearer ${zenMoneyToken}`,
        'Content-Type': 'application/json',
        'User-Agent': 'PellaZenMoneyBot/1.0'
      },
      timeout: 30000
    });
    
    const data = response.data;
    const tags = data.tag || {};
    
    if (Object.keys(tags).length === 0) {
      await bot.editMessageText('‚ùå –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ZenMoney', {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await bot.editMessageText('üîÑ –ü–æ–ª—É—á–µ–Ω—ã —Ç–µ–≥–∏ –∏–∑ ZenMoney. –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Supabase...', {
      chat_id: chatId,
      message_id: loadingMessage.message_id
    });
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ Supabase
    const clearResult = await supabaseClient.clearTags();
    if (!clearResult.success) {
      await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü—ã: ${clearResult.error}`, {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await bot.editMessageText('üîÑ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–≥–∏ –≤ Supabase...', {
      chat_id: chatId,
      message_id: loadingMessage.message_id
    });
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–≥–∏ –¥–ª—è Supabase
    const tagsForSupabase = Object.values(tags).map(tag => {
      // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã changed
      let changedDate = null;
      if (tag.changed && typeof tag.changed === 'number' && tag.changed > 0) {
        try {
          const date = new Date(tag.changed * 1000);
          if (!isNaN(date.getTime())) {
            changedDate = date.toISOString();
          }
        } catch (error) {
          console.warn(`–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ changed –¥–ª—è —Ç–µ–≥–∞ ${tag.id}:`, tag.changed);
        }
      }

      return {
        id: tag.id,
        user_id: tag.user,
        title: tag.title,
        parent_id: tag.parent || null,
        color: tag.color || null,
        icon: tag.icon || null,
        picture: tag.picture || null,
        show_income: tag.showIncome === true,
        show_outcome: tag.showOutcome !== false,
        budget_income: tag.budgetIncome === true,
        budget_outcome: tag.budgetOutcome === true,
        required: tag.required === true,
        archive: tag.archive === true,
        static_id: tag.staticId || null,
        changed: changedDate
      };
    });
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –≤ Supabase
    const insertResult = await supabaseClient.insertTags(tagsForSupabase);
    if (!insertResult.success) {
      await bot.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–≥–æ–≤: ${insertResult.error}`, {
        chat_id: chatId,
        message_id: loadingMessage.message_id
      });
      return;
    }
    
    // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    await bot.editMessageText(`‚úÖ –¢–µ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Supabase!\n\nüìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${tagsForSupabase.length} —Ç–µ–≥–æ–≤`, {
      chat_id: chatId,
      message_id: loadingMessage.message_id
    });
    
    console.log(`–¢–µ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Supabase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userName} (${tagsForSupabase.length} —Ç–µ–≥–æ–≤)`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ loadingMessage —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (loadingMessage) {
      try {
        await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {
          chat_id: chatId,
          message_id: loadingMessage.message_id
        });
      } catch (editError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', editError);
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
    } else {
      // –ï—Å–ª–∏ loadingMessage –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai_settings
async function handleAISettingsCommand(chatId, userName) {
  try {
    if (!supabaseClient) {
      bot.sendMessage(chatId, '‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SB_PROJECT_ID –∏ SB_TOKEN.');
      return;
    }

    const settingsResult = await supabaseClient.getActiveAISettings();
    
    if (!settingsResult.success || !settingsResult.data) {
      bot.sendMessage(chatId, `ü§ñ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*

‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ò–ò –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.

üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`, { parse_mode: 'Markdown' });
      return;
    }

    const aiSettings = settingsResult.data;
    const status = aiSettings.is_active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞';
    
    const message = `ü§ñ *–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò:*

üîß *–ü—Ä–æ–≤–∞–π–¥–µ—Ä:* ${escapeMarkdown(aiSettings.provider || '–ù–µ —É–∫–∞–∑–∞–Ω')}
ü§ñ *–ú–æ–¥–µ–ª—å:* ${escapeMarkdown(aiSettings.model || '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üîë *API –∫–ª—é—á:* ${aiSettings.api_key ? '‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üìä *–ú–∞–∫—Å\\. —Ç–æ–∫–µ–Ω–æ–≤:* ${aiSettings.max_tokens || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* ${aiSettings.temperature || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚è±Ô∏è *–¢–∞–π–º–∞—É—Ç:* ${aiSettings.timeout || '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–µ–∫
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(aiSettings.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}
üìÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* ${aiSettings.updated_at ? new Date(aiSettings.updated_at).toLocaleString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

*–°—Ç–∞—Ç—É—Å:* ${status}`;

    bot.sendMessage(chatId, message, { parse_mode: 'Markdown' })
      .then(() => {
        console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userName}`);
      })
      .catch((error) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò:', error);
      });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai_test
async function handleAITestCommand(chatId, userName) {
  try {
    if (!supabaseClient) {
      bot.sendMessage(chatId, '‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ SB_PROJECT_ID –∏ SB_TOKEN.');
      return;
    }

    const loadingMessage = await bot.sendMessage(chatId, 'üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª...');

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { testAIFunctionality } = require('./src/ai/analyzer');
    
    const testResult = await testAIFunctionality(supabaseClient);
    
    if (testResult.success) {
      const message = `‚úÖ *–¢–µ—Å—Ç –ò–ò –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ\\!*

${escapeMarkdown(testResult.message)}

üß™ *–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:*
${testResult.testAnalysis.success ? 
  `üéØ –ù–∞–π–¥–µ–Ω–æ —Ç–µ–≥–æ–≤: ${testResult.testAnalysis.tags?.length || 0}
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round((testResult.testAnalysis.confidence || 0) * 100)}%
${testResult.testAnalysis.tags?.length > 0 ? 
  `üèÜ –û—Å–Ω–æ–≤–Ω–æ–π: ${escapeMarkdown(testResult.testAnalysis.primaryTag?.title || '–ù–µ –Ω–∞–π–¥–µ–Ω')}` : 
  '‚ùå –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
}` : 
  `‚ùå –û—à–∏–±–∫–∞: ${escapeMarkdown(testResult.testAnalysis.error)}`
}`;

      bot.editMessageText(message, {
        chat_id: chatId,
        message_id: loadingMessage.message_id,
        parse_mode: 'Markdown'
      });
    } else {
      bot.editMessageText(`‚ùå *–¢–µ—Å—Ç –ò–ò –Ω–µ –ø—Ä–æ—à–µ–ª*

–û—à–∏–±–∫–∞: ${escapeMarkdown(testResult.error)}

üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –∫–æ–º–∞–Ω–¥–æ–π /ai_settings`, {
        chat_id: chatId,
        message_id: loadingMessage.message_id,
        parse_mode: 'Markdown'
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ò–ò:', error);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
function createTransactionStructure(comment, accountName = '–ë—É–º–∞–∂–Ω–∏–∫') {
  return `–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:

üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç—ã
üëõ ${accountName}
üí≤ 500 000
üí¨ ${comment}`;
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function createTransactionKeyboard() {
  return [
    [
      {
        text: 'üí≥',
        callback_data: 'transaction_card'
      },
      {
        text: 'üíµ',
        callback_data: 'transaction_cash'
      },
      {
        text: '‚úÖ',
        callback_data: 'transaction_apply'
      },
      {
        text: '‚ùå', 
        callback_data: 'transaction_cancel'
      },
      {
        text: '‚úèÔ∏è',
        callback_data: 'transaction_edit'
      }
    ]
  ];
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const messageId = callbackQuery.message.message_id;
  const data = callbackQuery.data;
  const user = callbackQuery.from;
  const userName = user.first_name || user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
  bot.answerCallbackQuery(callbackQuery.id)
    .then(() => {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∞–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userName}: ${data}`);
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:', error);
    });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  switch (data) {
    case 'transaction_apply':
      await handleTransactionApply(chatId, messageId, callbackQuery.message.text);
      break;
      
    case 'transaction_cancel':
      await handleTransactionCancel(chatId, messageId, callbackQuery.message.text);
      break;
      
    case 'transaction_edit':
      await handleTransactionEdit(chatId, messageId);
      break;
      
    case 'transaction_card':
      await handleAccountSelection(chatId, messageId, 'default_card', callbackQuery.message.text);
      break;
      
    case 'transaction_cash':
      await handleAccountSelection(chatId, messageId, 'default_cash', callbackQuery.message.text);
      break;
      
    // –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    case 'unified_apply':
      await handleUnifiedApply(chatId, messageId, callbackQuery.message.text);
      break;
      
    case 'unified_cancel':
      await handleUnifiedCancel(chatId, messageId, callbackQuery.message.text);
      break;
      
    case 'unified_edit':
      await handleUnifiedEdit(chatId, messageId);
      break;
      
    case 'unified_account_card':
      await handleUnifiedAccountSelection(chatId, messageId, 'default_card', callbackQuery.message.text);
      break;
      
    case 'unified_account_cash':
      await handleUnifiedAccountSelection(chatId, messageId, 'default_cash', callbackQuery.message.text);
      break;
      
    case 'unified_account_shared_card':
      await handleUnifiedAccountSelection(chatId, messageId, 'shared_card', callbackQuery.message.text);
      break;
      
    default:
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ò–ò —Ç–µ–≥–æ–≤ (—Å—Ç–∞—Ä—ã–µ)
      if (data.startsWith('ai_tag_')) {
        const tagId = data.replace('ai_tag_', '');
        await handleAITagSelection(chatId, messageId, tagId, callbackQuery.message.text);
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ç–µ–≥–æ–≤ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–Ω–æ–≤—ã–µ)
      else if (data.startsWith('unified_tag_')) {
        const tagId = data.replace('unified_tag_', '');
        await handleUnifiedTagSelection(chatId, messageId, tagId, callbackQuery.message.text);
      } else {
        console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback data: ${data}`);
      }
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞ –ò–ò
async function handleAITagSelection(chatId, messageId, tagId, originalMessage) {
  try {
    if (!supabaseClient) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–µ–≥–µ
    const tagsResult = await supabaseClient.getAllTagsWithParents();
    if (!tagsResult.success || !tagsResult.data) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–≥–µ.');
      return;
    }

    const selectedTag = tagsResult.data.find(tag => tag.id === tagId);
    if (!selectedTag) {
      bot.sendMessage(chatId, '‚ùå –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–∞
    const confirmationMessage = `‚úÖ *–í—ã–±—Ä–∞–Ω —Ç–µ–≥:* ${escapeMarkdown(selectedTag.title)}
    
${selectedTag.parent_title ? `üìÇ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* ${escapeMarkdown(selectedTag.parent_title)}` : ''}
${selectedTag.description ? `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${escapeMarkdown(selectedTag.description)}` : ''}

üéØ –¢–µ–≥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\\!`;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    bot.editMessageText(confirmationMessage, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'Markdown'
    });

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–≥ –ò–ò: ${selectedTag.title} (ID: ${tagId})`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞ –ò–ò:', error.message);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function handleTransactionApply(chatId, messageId, originalMessage) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø–∏—Å–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const structureMatch = originalMessage.match(/–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:(.+)/s);
    const structure = structureMatch ? structureMatch[1].trim() : originalMessage;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newMessage = `‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞

${structure}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    bot.editMessageText(newMessage, {
      chat_id: chatId,
      message_id: messageId
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è MarkdownV2
function escapeMarkdownV2(text) {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function handleTransactionCancel(chatId, messageId, originalMessage) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø–∏—Å–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const structureMatch = originalMessage.match(/–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:(.+)/s);
    const structure = structureMatch ? structureMatch[1].trim() : originalMessage;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
    const strikethroughStructure = structure.split('\n').map(line => 
      line.trim() ? `~~${escapeMarkdownV2(line.trim())}~~` : line
    ).join('\n');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newMessage = `‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞

${strikethroughStructure}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    bot.editMessageText(newMessage, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'MarkdownV2'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function handleTransactionEdit(chatId, messageId) {
  try {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.deleteMessage(chatId, messageId);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞
async function handleAccountSelection(chatId, messageId, settingName, originalMessage) {
  try {
    if (!supabaseClient) {
      bot.editMessageText('‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Supabase
    const settingResult = await supabaseClient.getSetting(settingName);
    const accountName = settingResult.success && settingResult.value ? settingResult.value : '–ë—É–º–∞–∂–Ω–∏–∫';
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const commentMatch = originalMessage.match(/üí¨ \*\*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\*\* (.+)/);
    const comment = commentMatch ? commentMatch[1] : '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω';
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—á–µ—Ç–æ–º
    const newTransactionStructure = createTransactionStructure(comment, accountName);
    const inlineKeyboard = createTransactionKeyboard();
    
    bot.editMessageText(newTransactionStructure, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: inlineKeyboard
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞:', error);
    bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—á–µ—Ç–∞', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// ===== –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ï–î–ò–ù–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø =====

/**
 * –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {string} messageText - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @returns {Object|null} - –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ null
 */
function parseTransactionFromMessage(messageText) {
  try {
    console.log('üîç –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    const tagMatch = messageText.match(/üõçÔ∏è (.+)/);
    const accountMatch = messageText.match(/üëõ (.+)/);
    const amountMatch = messageText.match(/üí≤ (.+)/);
    const commentMatch = messageText.match(/üí¨ (.+)/);
    
    if (!tagMatch || !accountMatch || !amountMatch || !commentMatch) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è');
      return null;
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
    const amountStr = amountMatch[1].replace(/\s+/g, '').replace(',', '.');
    const amount = parseFloat(amountStr);
    
    if (isNaN(amount)) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—É–º–º—É:', amountMatch[1]);
      return null;
    }
    
    const transactionData = {
      tag: {
        title: tagMatch[1].trim()
      },
      account: {
        name: accountMatch[1].trim()
      },
      amount: amount,
      formattedAmount: amountMatch[1].trim(),
      comment: commentMatch[1].trim()
    };
    
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:', transactionData);
    return transactionData;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
async function handleUnifiedApply(chatId, messageId, originalMessage) {
  try {
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø–∏—Å—å"...');
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const transactionData = parseTransactionFromMessage(originalMessage);
    if (!transactionData) {
      bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }
    
    console.log('üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', transactionData);
    
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ ZenMoney
    const createResult = await createTransactionInZenMoney(transactionData, supabaseClient);
    
    if (createResult.success) {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
      const successMessage = `‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞

${transactionData.tag.title}
${transactionData.account.name}
${transactionData.formattedAmount} ‚ÇΩ
${transactionData.comment}`;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
      bot.editMessageText(successMessage, {
        chat_id: chatId,
        message_id: messageId
      });
      
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ ZenMoney');
      
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Å–æ–∑–¥–∞–Ω–∏—è
      const errorMessage = `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ ZenMoney

${createResult.error}

üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ZenMoney API.`;
      
      bot.editMessageText(errorMessage, {
        chat_id: chatId,
        message_id: messageId
      });
      
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ ZenMoney:', createResult.error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error.message);
    bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
async function handleUnifiedCancel(chatId, messageId, originalMessage) {
  try {
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"...');
    
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const transactionData = parseTransactionFromMessage(originalMessage);
    if (!transactionData) {
      bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∫–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
    const strikethroughStructure = originalMessage.split('\n').map(line => {
      if (!line.trim()) return line;
      
      // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
      const escapedLine = line.trim()
        .replace(/\\/g, '\\\\')
        .replace(/\*/g, '\\*')
        .replace(/_/g, '\\_')
        .replace(/\[/g, '\\[')
        .replace(/\]/g, '\\]')
        .replace(/\(/g, '\\(')
        .replace(/\)/g, '\\)')
        .replace(/~/g, '\\~')
        .replace(/`/g, '\\`')
        .replace(/>/g, '\\>')
        .replace(/#/g, '\\#')
        .replace(/\+/g, '\\+')
        .replace(/-/g, '\\-')
        .replace(/=/g, '\\=')
        .replace(/\|/g, '\\|')
        .replace(/\{/g, '\\{')
        .replace(/\}/g, '\\}')
        .replace(/\./g, '\\.')
        .replace(/!/g, '\\!');
      
      return `~~${escapedLine}~~`;
    }).join('\n');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const newMessage = `‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞

${strikethroughStructure}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    bot.editMessageText(newMessage, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'MarkdownV2'
    });
    
    console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
async function handleUnifiedEdit(chatId, messageId) {
  try {
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.deleteMessage(chatId, messageId);
    console.log('‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
async function handleUnifiedAccountSelection(chatId, messageId, settingName, originalMessage) {
  try {
    console.log(`üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞: ${settingName} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${chatId}_${messageId}`);
    
    if (!supabaseClient) {
      console.error('‚ùå Supabase –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      console.error('‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ supabaseClient:', supabaseClient);
      bot.editMessageText('‚ùå Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', {
        chat_id: chatId,
        message_id: messageId
      });
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ Supabase
    console.log(`üìã –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É: ${settingName}`);
    const settingResult = await supabaseClient.getSetting(settingName);
    console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`, settingResult);
    
    let accountName;
    
    if (settingName === 'default_card') {
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–µ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      accountName = (settingResult.success && settingResult.value && settingResult.value.trim() !== '') 
        ? settingResult.value.trim() 
        : '–ö–∞—Ä—Ç–∞';
    } else if (settingName === 'default_cash') {
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–µ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      accountName = (settingResult.success && settingResult.value && settingResult.value.trim() !== '') 
        ? settingResult.value.trim() 
        : '–ë—É–º–∞–∂–Ω–∏–∫';
    } else if (settingName === 'shared_card') {
      // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–µ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      accountName = (settingResult.success && settingResult.value && settingResult.value.trim() !== '') 
        ? settingResult.value.trim() 
        : '–û–±—â–∞—è –∫–∞—Ä—Ç–∞';
    } else {
      accountName = '–ë—É–º–∞–∂–Ω–∏–∫';
    }
    
    console.log(`üè¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞: ${accountName}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç–æ–º
    console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—á–µ—Ç–æ–º: ${accountName}`);
    const updatedMessage = updateMessageWithNewAccount(originalMessage, accountName);
    console.log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:`, updatedMessage);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const messageKey = `${chatId}_${messageId}`;
    const originalAiTags = aiTagsStorage.get(messageKey) || [];
    
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageKey}:`, originalAiTags.map(t => t.title));
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let availableTags = originalAiTags;
    if (availableTags.length === 0) {
      console.log(`üìã –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –ø—É—Å—Ç—ã`);
      const tagsResult = await supabaseClient.getAllTagsWithParents();
      console.log(`üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤:`, tagsResult);
      availableTags = tagsResult.success && tagsResult.data ? tagsResult.data.filter(tag => tag.parent_id !== null) : [];
    }
    
    const keyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–≥–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏ –æ—Ç –ò–ò
    if (availableTags.length > 0) {
      const tagButtons = [];
      // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–µ–≥–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
      const tagsForButtons = availableTags.slice(0, 3);
      
      for (const tag of tagsForButtons) {
        tagButtons.push({
          text: tag.title,
          callback_data: `unified_tag_${tag.id}`
        });
      }
      
      if (tagButtons.length > 0) {
        keyboard.push(tagButtons);
      }
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const mainButtons = [
      { text: 'üí≥', callback_data: 'unified_account_card' },
      { text: 'üíµ', callback_data: 'unified_account_cash' },
      { text: 'ü™™', callback_data: 'unified_account_shared_card' },
      { text: '‚ùå', callback_data: 'unified_cancel' },
      { text: '‚úÖ', callback_data: 'unified_apply' }
    ];
    
    keyboard.push(mainButtons);
    
    console.log(`‚å®Ô∏è –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:`, keyboard);
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...`);
    
    bot.editMessageText(updatedMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
    
    console.log(`‚úÖ –°—á–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: ${accountName}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      message: error.message,
      stack: error.stack,
      chatId,
      messageId,
      settingName
    });
    bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—á–µ—Ç–∞', {
      chat_id: chatId,
      message_id: messageId
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
async function handleUnifiedTagSelection(chatId, messageId, tagId, originalMessage) {
  try {
    if (!supabaseClient) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: Supabase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–µ–≥–µ
    const tagsResult = await supabaseClient.getAllTagsWithParents();
    if (!tagsResult.success || !tagsResult.data) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–≥–µ.');
      return;
    }

    const selectedTag = tagsResult.data.find(tag => tag.id === tagId);
    if (!selectedTag) {
      bot.sendMessage(chatId, '‚ùå –¢–µ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–≥–æ–º
    const updatedMessage = updateMessageWithNewTag(originalMessage, selectedTag.title);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const messageKey = `${chatId}_${messageId}`;
    const originalAiTags = aiTagsStorage.get(messageKey) || [];
    
    console.log(`üîç –ü–æ–ª—É—á–µ–Ω—ã –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageKey}:`, originalAiTags.map(t => t.title));
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ –æ—Ç –ò–ò, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const availableTags = originalAiTags.length > 0 ? originalAiTags : tagsResult.data.filter(tag => tag.parent_id !== null);
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–≥–æ–≤
    const keyboard = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–µ–≥–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏ –æ—Ç –ò–ò
    if (availableTags.length > 0) {
      const tagButtons = [];
      const tagsForButtons = availableTags.slice(0, 3);
      
      for (const tag of tagsForButtons) {
        tagButtons.push({
          text: tag.title,
          callback_data: `unified_tag_${tag.id}`
        });
      }
      
      if (tagButtons.length > 0) {
        keyboard.push(tagButtons);
      }
    }
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const mainButtons = [
      { text: 'üí≥', callback_data: 'unified_account_card' },
      { text: 'üíµ', callback_data: 'unified_account_cash' },
      { text: 'ü™™', callback_data: 'unified_account_shared_card' },
      { text: '‚ùå', callback_data: 'unified_cancel' },
      { text: '‚úÖ', callback_data: 'unified_apply' }
    ];
    
    keyboard.push(mainButtons);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    bot.editMessageText(updatedMessage, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

    console.log(`‚úÖ –¢–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: ${selectedTag.title} (ID: ${tagId})`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞ –≤ –µ–¥–∏–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', error.message);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞.');
  }
}


// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

function splitMessage(text, maxLength) {
  const chunks = [];
  let currentChunk = '';
  
  const lines = text.split('\n');
  
  for (const line of lines) {
    if (currentChunk.length + line.length + 1 > maxLength) {
      if (currentChunk) {
        chunks.push(currentChunk);
        currentChunk = line;
      } else {
        chunks.push(line);
      }
    } else {
      currentChunk += (currentChunk ? '\n' : '') + line;
    }
  }
  
  if (currentChunk) {
    chunks.push(currentChunk);
  }
  
  return chunks;
}


// –ë–∞–∑–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  res.json({
    status: 'OK',
    message: 'Telegram Bot is running',
    timestamp: new Date().toISOString()
  });
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
app.get('/bot-info', (req, res) => {
  bot.getMe()
    .then((botInfo) => {
      res.json({
        bot: botInfo,
        users: messageCounters.size,
        totalMessages: Array.from(messageCounters.values()).reduce((sum, count) => sum + count, 0)
      });
    })
    .catch((error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error);
      res.status(500).json({ error: 'Failed to get bot info' });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((error, req, res, next) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  res.status(500).json({ error: 'Internal Server Error' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± Webhook endpoint: http://localhost:${PORT}/webhook`);
  console.log(`‚ÑπÔ∏è  Bot info endpoint: http://localhost:${PORT}/bot-info`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});
